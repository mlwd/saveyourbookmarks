<!DOCTYPE HTML>
<html>
<head>
<%- include('header.ejs') %>
</head>
<body>
<script type='text/jsx'>

  class TableRow extends React.Component {
    constructor(props) {
      super(props);
      this.state = {edit: false};
    }

    startEdit() {
      this.setState({edit: true});
    }

    cancelEdit() {
      delete this.title;
      delete this.url;
      this.setState({edit: false});
    }

    saveEdit() {
      if (!this.title && !this.url) return;
      const save_title = this.title || this.props.title;
      const save_url = this.url || this.props.url;
      this.props.editBookmark(save_title, save_url, this.props.id);
      this.cancelEdit();
    }

    changeTitle(e) {
      this.title = e.target.value;
    }

    changeURL(e) {
      this.url = e.target.value;
    }

    render () {
      if (this.state.edit) return this.renderEditable();
      return (
        <div class="row mt-1">
          <div class="col">{this.props.title}</div>
          <div class="col"><a href={this.props.url}>{this.props.url}</a></div>
          <div class="col-auto">
            <i class="bi bi-trash mx-2" title="Delete"
               onClick={() => this.props.deleteBookmark(this.props.id)}></i>
            <i class="bi bi-pencil mx-2" title="Edit"
               onClick={() => this.startEdit()}></i>
          </div>
        </div>
      );
    }

    renderEditable() {
      return (
        <div class="row mt-1">
          <div class="col">
            <input class="form-control" type="text"
                   defaultValue={this.props.title}
                   onChange={(e) => this.changeTitle(e)}>
            </input>
          </div>
          <div class="col">
            <input class="form-control" type="text"
                   defaultValue={this.props.url}
                   onChange={(e) => this.changeURL(e)}>
            </input>
          </div>
          <div class="col-auto">
            <i class="bi bi-x-lg mx-2" onClick={() => this.cancelEdit()}></i>
            <i class="bi bi-check-lg mx-2" onClick={() => this.saveEdit()}></i>
          </div>
        </div>
      );
    }
  }

  function ControlledInput(props) {
    return (
      <input class="form-control-sm"
             type='text'
             placeholder={props.placeholder}
             value={props.value}
             contentEditable='true'
             onChange={props.onChange}>
      </input>
    );
  }

  class TableRowInput extends React.Component {

    constructor(props) {
      super(props);
      this.state = {title: '', url: ''};
    }

    onChangeTitle(e) {
      this.setState({title: e.target.value});
    }

    onChangeURL(e) {
      this.setState({url: e.target.value});
    }

    startSearch() {
      this.props.searchBookmark(this.state.title, this.state.url);
    }

    saveBookmark() {
      this.props.saveBookmark(this.state.title, this.state.url);
      this.setState({title: '', url: ''});
    }

    render () {
      return (
        <div class="row">
          <div class="col">
            <ControlledInput placeholder='Title' value={this.state.title}
                             onChange={(e) => this.onChangeTitle(e)}/>
          </div>
          <div class="col">
            <ControlledInput placeholder='Link'  value={this.state.url}
                             onChange={(e) => this.onChangeURL(e)}/>
          </div>
          <div class="col-auto">
            <i class="bi bi-search mx-2" title="Search" onClick={() => this.startSearch()}></i>
            <i class="bi bi-save mx-2"   title="Save"   onClick={() => this.saveBookmark()}></i>
          </div>
        </div>
      );
    }
  }

  class Bookmarks extends React.Component {
    constructor(props) {
      super(props);
      this.state = {search_title: '', search_url: '', bookmarks: []};
    }

    searchBookmark(search_title, search_url) {
      this.setState({search_title, search_url});
    }

    componentDidMount() {
      this.fetchBookmarks();
    }

    componentDidUpdate(prevProps) {
      if (prevProps.listId !== this.props.listId)
        this.fetchBookmarks();
    }

    fetchBookmarks() {
      fetch("/bookmarks/" + this.props.listId)
        .then(response => response.json())
        .then(bookmarks => this.setState({bookmarks}))
    }

    render() {
      const tableRows = [<TableRowInput title={this.state.search_title} url={this.state.search_url}
                                        searchBookmark={(t, u) => this.searchBookmark(t, u)}
                                        saveBookmark={(t, u) => this.saveBookmark(t, u, this.props.listId)}/>];
      const sorted_rows = this.state.bookmarks.slice();
      sorted_rows.sort((b1, b2) => b1.title.localeCompare(b2.title));
      for (let row of sorted_rows) {
        if (row.title.includes(this.state.search_title) &&
            row.url.includes(this.state.search_url)) {
          tableRows.push(<TableRow id={row.id} title={row.title} url={row.url}
                                   saveBookmark={(t, u) => this.saveBookmark(t, u)}
                                   editBookmark={(t, u, id) => this.editBookmark(t, u, id)}
                                   deleteBookmark={id => this.deleteBookmark(id)}/>);
        }
      }
      return tableRows;
    }

    saveBookmark(title, url, listId) {
      console.log("Save bookmark: title=" + title + ", url=" + url + ", listId=" + listId);
      if (!title || !url) return;
      const messageDiv = document.getElementById('message-div');
      const init = {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({title, url, listId})
      };
      fetch('/savebookmark', init)
        .then(response => response.text())
        .then(message => {
          messageDiv.innerHTML = message;
          this.fetchBookmarks();
        })
        .catch(err => console.log(err));
    }

    editBookmark(title, url, id) {
      console.log("Edit bookmark: id=" + id + ", title=" + title + ", url=" + url);
      if (!title || !url) return;
      const messageDiv = document.getElementById('message-div');
      const init = {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({title, url, id})
      };
      fetch('/editbookmark', init)
        .then(response => response.text())
        .then(message => {
          messageDiv.innerHTML = message;
          this.fetchBookmarks();
        })
        .catch((err) => console.log(err));
    }

    deleteBookmark(id) {
      console.log("Delete bookmark: id=" + id);
      const init = {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({id})
      };
      fetch('/deletebookmark', init)
        .then(reponse => this.fetchBookmarks())
        .catch(err => console.log(err));
    }
  }

  function exportBookmark() {
    console.log("Export bookmark.");
    window.location = "/exportbookmark";
  }

  function BookmarkLists(props) {
    const [name, setName] = React.useState('');
    const [bookmarkLists, setBookmarkLists] = React.useState(null);

    function saveBookmarkList() {
      console.log("Save bookmark list: name=" + name);
      if (!name) return;
      const messageDiv = document.getElementById('message-div');
      const init = {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({name})
      };
      fetch('/savebookmarklist', init)
        .then(response => response.text())
        .then(message => {
          messageDiv.innerHTML = message;
          fetchBookmarkLists();
        })
        .catch(err => console.log(err));
    }

    React.useEffect(() => {
      if (!bookmarkLists) {
        fetchBookmarkLists();
      }
    });

    function fetchBookmarkLists() {
      fetch("/bookmarklists")
        .then(response => response.json())
        .then(lists => {
          const firstListId = lists.length > 0 ? lists[0].id : null;
          props.setBookmarkList(props.listId || firstListId);
          setBookmarkLists(lists)
        });
    }

    function deleteBookmarkList(listId) {
      console.log("Delete bookmark list: listId=" + listId);
      const init = {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({listId})
      };
      fetch('/deletebookmarklist', init)
        .then(reponse => fetchBookmarkLists())
        .catch(err => console.log(err));
    }

    const inputs = [
      <div class="row">
        <div class="col">
          <ControlledInput placeholder='Link'  value={name}
                           onChange={(e) => setName(e.target.value)}/>
        </div>
        <div class="col-auto">
          <i class="bi bi-search mx-2" title="Search" onClick={() => alert("Not yet implementeed")}></i>
          <i class="bi bi-save mx-2"   title="Save"   onClick={() => saveBookmarkList()}></i>
        </div>
      </div>
    ];
    return inputs.concat((bookmarkLists || []).map(row =>
      <div class="row mt-1">
        <div class="col bookmark-list-name" onClick={() => props.setBookmarkList(row.id)}>{row.name}</div>
        <div class="col-auto">
          <i class="bi bi-trash mx-2" title="Delete" onClick={() => deleteBookmarkList(row.id)}></i>
          <i class="bi bi-pencil mx-2" title="Edit" onClick={() => alert("Not yet implemented")}></i>
        </div>
      </div>
    ));
  }

  class BookmarkBrowser extends React.Component {
    constructor (props) {
      super(props);
      this.state = {listId: null};
    }

    setBookmarkList(listId) {
      console.log("Set bookmark list: " + listId);
      this.setState({listId});
    }

    render () {
      return (
        <div class="row">
          <div class="col-4">
            <BookmarkLists listId={this.state.listId}
                           setBookmarkList={id => this.setBookmarkList(id)}/>
          </div>
          {this.state.listId &&
            <div class="col-8">
              <Bookmarks listId={this.state.listId}/>
            </div>
          }
        </div>
      );
    }
  }

  function renderBookmarkBrowser() {
    const bookmarkBrowser = document.getElementById("bookmark-browser");
    ReactDOM.render(<BookmarkBrowser/>, bookmarkBrowser);
  }

  renderBookmarkBrowser();
</script>

<div class="container mt-5">
  <div class="row">
    <div class="col">
      <h3>Save your bookmarks!</h3>
    </div>
    <div class="col-auto">
      <button onclick="exportBookmark()" class="btn-sm btn-outline-primary">Export</button>
      <button href="/logout" class="btn-sm btn-outline-primary">Logout</button>
    </div>
  </div>
  <div id="message-div"></div>
  <div id="bookmark-browser"></div>
</div>

</body>
</html>
